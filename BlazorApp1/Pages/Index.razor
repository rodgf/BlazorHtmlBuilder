@page "/"
@using HtmlBuilder.Builder
<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div style="padding: 20px;">
  @ETitle
</div>

<div style="padding: 20px;">
  @ETable
</div>

<div style="padding: 20px;">
  @((MarkupString)cbMembers.ControlDetails.XML)
</div>

@((MarkupString)MainXML)

<div style="padding: 20px;">
  <button type="button" @onclick="includeForm">Include Form</button>
</div>

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
  private List<Control> ControlList = new List<Control>();
  private ExampleTable _et = new ExampleTable();

  protected string MainXML { get; set; }
  protected RenderFragment ETitle { get; set; }
  protected RenderFragment ETable { get; set; }
  protected SelectControl cbMembers { get; set; }

  //
  protected override void OnInitialized() {

    // Mount form
    ComposeDummyForm mf = new ComposeDummyForm();
    ControlList.Add(mf.User());

    // Compose Example Title
    ETitle = CmpHlp.ComposeExample("id01", "Entry 01");

    // Compose Example Table
    _et.Rows = new Dictionary<string, string>() {
      { "Ref1", "" },
      { "Ref2", "" }
    };
    ETable = _et.Create();

    // Create combo box
    OptionControl oc;
    cbMembers = new SelectControl();
    cbMembers.ControlDetails.ID = "cbMembers";
    cbMembers.ControlDetails.Style = "width: 150px;";
    oc = new OptionControl("Value 1", "Item 1");
    cbMembers.Controls.Add(oc);
    oc = new OptionControl("Value 2", "Item 2");
    cbMembers.Controls.Add(oc);
    oc = new OptionControl("Value 3", "Item 3");
    cbMembers.Controls.Add(oc);

    // Compose XML
    MainXML = CtlHlp.Combine(ControlList);
    CtlHlp.Compose(cbMembers);
  }

  // Insert HTML
  private async Task includeForm() {

    // Change table data
    _et.Rows["Ref1"] = "Value 1";
    _et.Rows["Ref2"] = "Value 2";

    // Mount form
    ComposeDummyForm mf = new ComposeDummyForm();
    ControlList.Add(mf.User());

    // Compose XML
    MainXML = CtlHlp.Combine(ControlList);

    // Update renderization
    await InvokeAsync(() => {
      base.StateHasChanged();
    });
  }
}
